# === Script Configuration ===
# Email address to send backups to
:local EmailTo "example@mail.com";
# File containing the encryption password (must exist on the router)
:local PasswordFileName "new.txt"; 
# --- End Configuration ---

:local BackupEncryptionPassword ""; # Initialize the variable to store the encryption password

# --- Get Backup Encryption Password from File ---
# WARNING: This version assumes the password file ($PasswordFileName) ALWAYS exists.
# It does NOT trim whitespace (like newlines) from the password file's content.
# Any such characters will become part of the actual encryption password.
:do {
    :local rawPasswordFromFile [/file get $PasswordFileName contents]; 
    :set BackupEncryptionPassword $rawPasswordFromFile;

    :if ([:len $BackupEncryptionPassword] = 0) do={
        :log warning "Password file '$PasswordFileName' was found, but its content is completely empty. Backup might be unencrypted (ROS v6.43+).";
    } else {
        :log info "Successfully retrieved RAW (untrimmed) backup encryption password from file '$PasswordFileName'.";
    }
} on-error={
    :log error "CRITICAL ERROR: Could not read password from file '$PasswordFileName'. The file might be missing, or there could be permission/disk issues.";
    :log error "Script will terminate. Binary backup will likely NOT be created or will fail/be unencrypted.";
    :error "Failed to get backup password. Script terminated."; 
}

# Get system identity once for use in filenames or email subject
:local SystemName [/system identity get name];

# Get current date and time components for timestamping
:local CurrentDate [/system clock get date]; 
:local CurrentTime [/system clock get time]; 

:local Year [:tostr [:pick $CurrentDate 0 4]];
:local Month [:tostr [:pick $CurrentDate 5 7]];
:local Day [:tostr [:pick $CurrentDate 8 10]]; # Assuming YYYY format

:local Hour [:tostr [:pick $CurrentTime 0 2]];
:local Minute [:tostr [:pick $CurrentTime 3 5]];
:local Second [:tostr [:pick $CurrentTime 6 8]];

# Create a consistent timestamp for filenames
:local FileTimestamp "$Year-$Month-$Day-$Hour$Minute";
# Format for email display
:local EmailTimestamp "$Day/$Month/$Year $Hour:$Minute:$Second";

# Define filenames
:local RscFileName "$SystemName-$FileTimestamp.rsc";
:local BackupFileName "$SystemName-$FileTimestamp.backup";

:local ExportSuccess false;
:local BackupSuccess false;

# --- Export configuration (.rsc file) ---
:do {
    /export file=$RscFileName;
    :delay 1s; 
    :if ([:len [/file find name=$RscFileName]] > 0) do={
        :log info "Configuration exported successfully to $RscFileName";
        :set ExportSuccess true;
    } else={
        :log error "Failed to create export file: $RscFileName";
    }
} on-error={
    :log error "Error during configuration export: $RscFileName";
}

# --- Create binary backup (.backup file) ---
:do {
    /system backup save name=$BackupFileName encryption=aes-sha256 password=$BackupEncryptionPassword;
    :delay 1s; 
    :if ([:len [/file find name=$BackupFileName]] > 0) do={
        :log info "Binary backup created successfully: $BackupFileName";
        :set BackupSuccess true;
    } else={
        :log error "Failed to create binary backup file: $BackupFileName";
    }
} on-error={
    :log error "Error during binary backup creation: $BackupFileName";
}

# Proceed only if both backups were successful
:if ($ExportSuccess && $BackupSuccess) do={
    # Log gathering and sending has been removed from this version.

    :local MailSubject ("MikroTik Backup from " . $SystemName . " (" . $EmailTimestamp . ")");
    :do {
        /tool e-mail send to=$EmailTo subject=($MailSubject) \
            body=( \
                "System information:\n" . \
                "____________________\n\n" . \
                "Identity: " . $SystemName . "\n" . \
                "Board name: " . [/system resource get platform] . " " . [/system resource get board-name] . "\n" . \
                "RouterOS Version: " . [/system resource get version] . "\n" . \
                "Firmware: " . [/system routerboard get current-firmware] . "\n" . \
                "Free HDD: " . ([:tonum [/system resource get free-hdd-space]] / 1048576) . "MB (Total: " . ([:tonum [/system resource get total-hdd-space]] / 1048576) . "MB)\n" . \
                "Bad Blocks: " . [/system resource get bad-blocks] . "%\n" . \
                "Free Memory: " . ([:tonum [/system resource get free-memory]] / 1048576) . "MB (Total: " . ([:tonum [/system resource get total-memory]] / 1048576) . "MB)\n" . \
                "Uptime: " . [/system resource get uptime] . "\n" \
            ) \
            file=($BackupFileName, $RscFileName);
        :log info "Email with backup files ($BackupFileName, $RscFileName) sent successfully to $EmailTo.";

        :do {
            :delay 10s; 
            /file remove $BackupFileName;
            /file remove $RscFileName;
            :log info "Backup files ($BackupFileName, $RscFileName) removed successfully from router.";
        } on-error={
            :log warning "Could not remove backup files ($BackupFileName, $RscFileName) from router. Please remove manually.";
        }
    } on-error={
        :log error "Failed to send email with backup files!";
    }
} else={
    :log warning "Email not sent because one or both backup files were not created successfully.";
    :if ($ExportSuccess = false && [:len [/file find name=$RscFileName]] > 0) do={ /file remove $RscFileName; }
    :if ($BackupSuccess = false && [:len [/file find name=$BackupFileName]] > 0) do={ /file remove $BackupFileName; }
}
