# === Script Configuration ===
# Email address to send backups to
:local EmailTo "example@mail.com";
# Password for the encrypted backup file.
# Note: Since RouterOS v6.43, without a password, the backup file is unencrypted.
# See https://help.mikrotik.com/docs/spaces/ROS/pages/40992852/Backup
:local BackupEncryptionPassword "Your_encryption_password";
# === End of Script Configuration ===

# Get system identity once
:local SystemName [/system identity get name];

# Get current date and time components
:local CurrentDate [/system clock get date]; # e.g., may/28/2025
:local CurrentTime [/system clock get time]; # e.g., 09:44:23

:local Month [:tostr [:pick $CurrentDate 0 3]];

# Define filenames
:local RscFileName "$SystemName-$FileTimestamp.rsc";
:local BackupFileName "$SystemName-$FileTimestamp.backup";

:local ExportSuccess false;
:local BackupSuccess false;

# --- Export configuration (.rsc file) ---
:do {
    /export file=$RscFileName;
    :delay 1s; # Allow filesystem to catch up
    :if ([:len [/file find name=$RscFileName]] > 0) do={
        :log info "Configuration exported successfully to $RscFileName";
        :set ExportSuccess true;
    } else={
        :log error "Failed to create export file: $RscFileName";
    }
} on-error={
    :log error "Error during configuration export: $RscFileName";
}

# --- Create binary backup (.backup file) ---
:do {
    /system backup save name=$BackupFileName encryption=aes-sha256 password=$BackupEncryptionPassword;
    :delay 1s; # Allow filesystem to catch up
    :if ([:len [/file find name=$BackupFileName]] > 0) do={
        :log info "Binary backup created successfully: $BackupFileName";
        :set BackupSuccess true;
    } else={
        :log error "Failed to create binary backup file: $BackupFileName";
    }
} on-error={
    :log error "Error during binary backup creation: $BackupFileName";
}

# Proceed only if both backups were successful
:if ($ExportSuccess && $BackupSuccess) do={
    # --- Gather Log Messages for Email ---
    :local LogDateFilter ("$Month/$Day"); # Filter logs for current month/day e.g. "may/28"
                                         # Note: This will catch logs for the current day of *any* year stored.
                                         # For more precise filtering (e.g. last 24h) logic would be more complex.

    :local CriticalLogMessages "No CRITICAL messages found for $LogDateFilter today.\n";
    :local TempCriticalLog "";
    :foreach i in=[/log find date~"$LogDateFilter" topics~"critical"] do={
        :set TempCriticalLog ($TempCriticalLog . "[" . [/log get $i time] . "] " . [/log get $i message] . "\n");
    }
    :if ([:len $TempCriticalLog] > 0) do={ :set CriticalLogMessages $TempCriticalLog; }

    :local ErrorLogMessages "No ERROR messages found for $LogDateFilter today.\n";
    :local TempErrorLog "";
    :foreach i in=[/log find date~"$LogDateFilter" topics~"error"] do={
        :set TempErrorLog ($TempErrorLog . "[" . [/log get $i time] . "] " . [/log get $i message] . "\n");
    }
    :if ([:len $TempErrorLog] > 0) do={ :set ErrorLogMessages $TempErrorLog; }

    # --- Send Email with Attachments ---
    :do {
        /tool e-mail send to=$EmailTo subject=$MailSubject \
            body=( \
                "System information:\n" . \
                "____________________\n\n" . \
                "Identity: " . $SystemName . "\n" . \
                "Board name: " . [/system resource get platform] . " " . [/system resource get board-name] . "\n" . \
                "RouterOS Version: " . [/system resource get version] . "\n" . \
                "Firmware: " . [/system routerboard get current-firmware] . "\n" . \
                "Free HDD: " . ([:tonum [/system resource get free-hdd-space]] / 1048576) . "MB (Total: " . ([:tonum [/system resource get total-hdd-space]] / 1048576) . "MB)\n" . \
                "Bad Blocks: " . [/system resource get bad-blocks] . "%\n" . \
                "Free Memory: " . ([:tonum [/system resource get free-memory]] / 1048576) . "MB (Total: " . ([:tonum [/system resource get total-memory]] / 1048576) . "MB)\n" . \
                "Uptime: " . [/system resource get uptime] . "\n\n" . \
                "CRITICAL Log Messages (for $LogDateFilter):\n********************************\n" . $CriticalLogMessages . "\n" . \
                "ERROR Log Messages (for $LogDateFilter):\n********************************\n" . $ErrorLogMessages \
            ) \
            file=($BackupFileName, $RscFileName);
        :log info "Email with backup files ($BackupFileName, $RscFileName) sent successfully to $EmailTo.";

        # --- Remove backup files after sending ---
        :do {
            :delay 10s; # Give some time for the email tool to release files
            /file remove $BackupFileName;
            /file remove $RscFileName;
            :log info "Backup files ($BackupFileName, $RscFileName) removed successfully from router.";
        } on-error={
            :log warning "Could not remove backup files ($BackupFileName, $RscFileName) from router. Please remove manually.";
        }
    } on-error={
        :log error "Failed to send email with backup files!";
    }
} else={
    :log warning "Email not sent because one or both backup files were not created successfully.";
    # Optionally, try to remove any file that might have been created partially or failed
    :if ($ExportSuccess = false && [:len [/file find name=$RscFileName]] > 0) do={ /file remove $RscFileName; }
    :if ($BackupSuccess = false && [:len [/file find name=$BackupFileName]] > 0) do={ /file remove $BackupFileName; }
}
